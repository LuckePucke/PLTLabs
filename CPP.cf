comment "#" ;
comment "//" ;
comment "/*" "*/" ;

TInt.		Type ::= "int" ;
TBool.		Type ::= "bool" ;
TChar.		Type ::= "char" ;
TDouble.	Type ::= "double" ;
TVoid.		Type ::= "void" ;

PDefs.		Program ::= [Def] ;
terminator	Def "" ;

DFun.		Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
separator	Arg "," ;
terminator	Stm "" ;

ADecl.		Arg ::= Type Id ;

SExp.		Stm ::= Exp ";" ;
SDecl.		Stm ::= Type Id ";" ;
SDecls.		Stm ::= Type Id "," [Id] ";" ;
SInit.		Stm ::= Type Id "=" Exp ";" ;

SReturn.	Stm ::= "return" Exp ";" ;
SBlock.		Stm ::= "{" [Stm] "}" ;

EInt.		Exp14 ::= Integer ;
EDouble.	Exp14 ::= Double ;
EString.	Exp14 ::= String ;
EChar.		Exp14 ::= Char ;
ETrue.		Exp14 ::= "true" ;
EFalse.		Exp14 ::= "false" ;
EVoid.		Exp14 ::= "void" ;
EQConst.	Exp14 ::= Id "::" [Id] ;

EId.		Exp14 ::= Id ;
ECall.		Exp14 ::= Id "(" [Exp] ")" ;

EPIncr.		Exp13 ::= Exp14 "++" ;
EPDecr.		Exp13 ::= Exp14 "--" ;

EIncr.		Exp12 ::= "++" Exp13 ;
EDecr.		Exp12 ::= "--" Exp13 ;
EDeref.		Exp12 ::= Exp13 "*" ;
ENeg.		Exp12 ::= "!" Exp13 ;

EMul.		Exp11 ::= Exp11 "*" Exp12 ;
EDiv.		Exp11 ::= Exp11 "/" Exp12 ;
EMod.		Exp11 ::= Exp11 "%" Exp12 ;

EAdd.		Exp10 ::= Exp10 "+" Exp11 ;
ESub.		Exp10 ::= Exp10 "-" Exp11 ;

ERShift.	Exp9 ::= Exp9 ">>" Exp10 ;
ELShift. 	Exp9 ::= Exp9 "<<" Exp10 ;

ELt. 		Exp8 ::= Exp8 "<" Exp9 ;
EGt. 		Exp8 ::= Exp8 ">" Exp9 ;
ELtEq. 		Exp8 ::= Exp8 "<=" Exp9 ;
EGtEq. 		Exp8 ::= Exp8 ">=" Exp9 ;

EEq.		Exp7 ::= Exp7 "==" Exp8 ;
ENEq.		Exp7 ::= Exp7 "==" Exp8 ;

EAnd.		Exp4 ::= Exp4 "&&" Exp5 ; 
EOr.		Exp3 ::= Exp3 "||" Exp4 ; 

EAss.		Exp2 ::= Exp2 "=" Exp3 ; 
EAddAss.	Exp2 ::= Exp2 "+=" Exp3 ; 
ESubAss.	Exp2 ::= Exp2 "-=" Exp3 ;

ECond. 		Exp1 ::= Exp1 "?" Exp2 ":" Exp3 ; 

EExc.		Exp ::= "throw" Exp ; 

token Id (letter (letter | digit | '_')*) ;

separator	Id "," ;

coercions	Exp 14 ;
separator	Exp "," ;

