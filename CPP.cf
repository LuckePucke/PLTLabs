comment "#" ;
comment "//" ;
comment "/*" "*/" ;

PDefs.		Program ::= [Def] ;
terminator	Def "" ;

DFun.		Def ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DFunDecl.	Def ::= Type Id "(" [Arg] ")" ";" ;

DUsing.		Def ::= "using" [QC] ";" ;
DTypedef.	Def ::= "typedef" Type Id ";" ;

separator	Arg "," ;
terminator	Stm "" ;

ATDecl.		Arg ::= Type ;
ADecl.		Arg ::= Type Id ;
ACTDecl.	Arg ::= "const" Type ;
ACDecl.		Arg ::= "const" Type Id ;

SExp.		Stm ::= Exp ";" ;

STDecl.		Stm ::= Type ";" ;
SDecl.		Stm ::= Type [Id] ";" ;
SInit.		Stm ::= Type Id "=" Exp ";" ;
SCTDecl.	Stm ::= "const" Type ";" ;
SCDecl.		Stm ::= "const" Type [Id] ";" ;
SCInit.		Stm ::= "const" Type Id "=" Exp ";" ;

SReturn.	Stm ::= "return" Exp ";" ;
SBlock.		Stm ::= "{" [Stm] "}" ;
SWhile.		Stm ::= "while" "(" Exp ")" Stm ;
SDoWhile.	Stm ::= "do" Stm "while" "(" Exp ")" ;
SFor.		Stm ::= "for" "(" Stm Exp ";" Exp ")" Stm ;
SIf.		Stm ::= "if" "(" Exp ")" Stm ;
SIfElse.	Stm ::= "if" "(" Exp ")" Stm "else" Stm ;
STypedef.	Stm ::= "typedef" Type Id ";" ;

EInt.		Exp15 ::= Integer ;
EDouble.	Exp15 ::= Double ;
EString.	Exp15 ::= [String] ;
EChar.		Exp15 ::= Char ;
ETrue.		Exp15 ::= "true" ;
EFalse.		Exp15 ::= "false" ;
EVoid.		Exp15 ::= "void" ;

EQC.		Exp15 ::= [QC] ;

ECall.		Exp14 ::= Exp14 "(" [Exp] ")" ;
EIndex.		Exp14 ::= Exp14 "[" Exp "]" ;
EStrProjA.	Exp14 ::= Exp14 "->" Exp15 ;
EStrProjD.	Exp14 ::= Exp14 "." Exp15 ;

EPIncr.		Exp14 ::= Exp15 "++" ;
EPDecr.		Exp14 ::= Exp15 "--" ;

EIncr.		Exp13 ::= "++" Exp14 ;
EDecr.		Exp13 ::= "--" Exp14 ;
EDeref.		Exp13 ::= "*" Exp14 ;
ENeg.		Exp13 ::= "!" Exp14 ;

EMul.		Exp12 ::= Exp12 "*" Exp13 ;
EDiv.		Exp12 ::= Exp12 "/" Exp13 ;
EMod.		Exp12 ::= Exp12 "%" Exp13 ;

EAdd.		Exp11 ::= Exp11 "+" Exp12 ;
ESub.		Exp11 ::= Exp11 "-" Exp12 ;

ERShift.	Exp10 ::= Exp10 ">>" Exp11 ;
ELShift. 	Exp10 ::= Exp10 "<<" Exp11 ;

ELt. 		Exp9 ::= Exp9 "<" Exp10 ;
EGt. 		Exp9 ::= Exp9 ">" Exp10 ;
ELtEq. 		Exp9 ::= Exp9 "<=" Exp10 ;
EGtEq. 		Exp9 ::= Exp9 ">=" Exp10 ;

EEq.		Exp8 ::= Exp8 "==" Exp9 ;
ENEq.		Exp8 ::= Exp8 "!=" Exp9 ;

EAnd.		Exp4 ::= Exp4 "&&" Exp5 ; 
EOr.		Exp3 ::= Exp3 "||" Exp4 ; 

EAss.		Exp2 ::= Exp2 "=" Exp3 ; 
EAddAss.	Exp2 ::= Exp2 "+=" Exp3 ; 
ESubAss.	Exp2 ::= Exp2 "-=" Exp3 ;

ECond. 		Exp2 ::= Exp2 "?" Exp3 ":" Exp4 ; 

EExc.		Exp1 ::= "throw" Exp1 ; 

token Id (letter (letter | digit | '_')*) ;
QCDef.		QC ::= Id ;

separator	nonempty Id "," ;
separator	nonempty QC "::" ;
separator	String "" ;

Tint.		Type ::= "int" ;
Tbool.		Type ::= "bool" ;
Tchar.		Type ::= "char" ;
Tdouble.	Type ::= "double" ;
Tvoid.		Type ::= "void" ;
TQC.		Type ::= [QC] ;
TRef.		Type ::= Type "&" ;
TDRef.		Type ::= Type "& &" ;

coercions	Exp 15 ;
separator	Exp "," ;

